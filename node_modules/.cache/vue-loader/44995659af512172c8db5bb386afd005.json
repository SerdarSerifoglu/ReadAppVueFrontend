{"remainingRequest":"/Users/omerserdarserifoglu/Desktop/reader-app-frontend/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/omerserdarserifoglu/Desktop/reader-app-frontend/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/omerserdarserifoglu/Desktop/reader-app-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/omerserdarserifoglu/Desktop/reader-app-frontend/src/views/pack/Add.vue?vue&type=template&id=d6bae7b6&scoped=true&","dependencies":[{"path":"/Users/omerserdarserifoglu/Desktop/reader-app-frontend/src/views/pack/Add.vue","mtime":1613303130635},{"path":"/Users/omerserdarserifoglu/Desktop/reader-app-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/omerserdarserifoglu/Desktop/reader-app-frontend/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/omerserdarserifoglu/Desktop/reader-app-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/omerserdarserifoglu/Desktop/reader-app-frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}